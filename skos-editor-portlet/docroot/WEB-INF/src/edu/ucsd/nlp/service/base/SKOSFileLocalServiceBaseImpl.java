/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucsd.nlp.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import edu.ucsd.nlp.model.SKOSFile;
import edu.ucsd.nlp.service.SKOSFileLocalService;
import edu.ucsd.nlp.service.persistence.ObjectHistoryPersistence;
import edu.ucsd.nlp.service.persistence.SKOSCollaborationEntryPersistence;
import edu.ucsd.nlp.service.persistence.SKOSFilePersistence;
import edu.ucsd.nlp.service.persistence.SKOSSettingPersistence;
import edu.ucsd.nlp.service.persistence.SharedFilePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the s k o s file local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link edu.ucsd.nlp.service.impl.SKOSFileLocalServiceImpl}.
 * </p>
 *
 * @author http://nlp-app.ucsd.edu
 * @see edu.ucsd.nlp.service.impl.SKOSFileLocalServiceImpl
 * @see edu.ucsd.nlp.service.SKOSFileLocalServiceUtil
 * @generated
 */
public abstract class SKOSFileLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements SKOSFileLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link edu.ucsd.nlp.service.SKOSFileLocalServiceUtil} to access the s k o s file local service.
	 */

	/**
	 * Adds the s k o s file to the database. Also notifies the appropriate model listeners.
	 *
	 * @param skosFile the s k o s file
	 * @return the s k o s file that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SKOSFile addSKOSFile(SKOSFile skosFile) throws SystemException {
		skosFile.setNew(true);

		return skosFilePersistence.update(skosFile);
	}

	/**
	 * Creates a new s k o s file with the primary key. Does not add the s k o s file to the database.
	 *
	 * @param skosFileId the primary key for the new s k o s file
	 * @return the new s k o s file
	 */
	@Override
	public SKOSFile createSKOSFile(long skosFileId) {
		return skosFilePersistence.create(skosFileId);
	}

	/**
	 * Deletes the s k o s file with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param skosFileId the primary key of the s k o s file
	 * @return the s k o s file that was removed
	 * @throws PortalException if a s k o s file with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SKOSFile deleteSKOSFile(long skosFileId)
		throws PortalException, SystemException {
		return skosFilePersistence.remove(skosFileId);
	}

	/**
	 * Deletes the s k o s file from the database. Also notifies the appropriate model listeners.
	 *
	 * @param skosFile the s k o s file
	 * @return the s k o s file that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SKOSFile deleteSKOSFile(SKOSFile skosFile) throws SystemException {
		return skosFilePersistence.remove(skosFile);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SKOSFile.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return skosFilePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link edu.ucsd.nlp.model.impl.SKOSFileModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return skosFilePersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link edu.ucsd.nlp.model.impl.SKOSFileModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return skosFilePersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return skosFilePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return skosFilePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public SKOSFile fetchSKOSFile(long skosFileId) throws SystemException {
		return skosFilePersistence.fetchByPrimaryKey(skosFileId);
	}

	/**
	 * Returns the s k o s file with the primary key.
	 *
	 * @param skosFileId the primary key of the s k o s file
	 * @return the s k o s file
	 * @throws PortalException if a s k o s file with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SKOSFile getSKOSFile(long skosFileId)
		throws PortalException, SystemException {
		return skosFilePersistence.findByPrimaryKey(skosFileId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return skosFilePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the s k o s files.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link edu.ucsd.nlp.model.impl.SKOSFileModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of s k o s files
	 * @param end the upper bound of the range of s k o s files (not inclusive)
	 * @return the range of s k o s files
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SKOSFile> getSKOSFiles(int start, int end)
		throws SystemException {
		return skosFilePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of s k o s files.
	 *
	 * @return the number of s k o s files
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSKOSFilesCount() throws SystemException {
		return skosFilePersistence.countAll();
	}

	/**
	 * Updates the s k o s file in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param skosFile the s k o s file
	 * @return the s k o s file that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SKOSFile updateSKOSFile(SKOSFile skosFile) throws SystemException {
		return skosFilePersistence.update(skosFile);
	}

	/**
	 * Returns the object history local service.
	 *
	 * @return the object history local service
	 */
	public edu.ucsd.nlp.service.ObjectHistoryLocalService getObjectHistoryLocalService() {
		return objectHistoryLocalService;
	}

	/**
	 * Sets the object history local service.
	 *
	 * @param objectHistoryLocalService the object history local service
	 */
	public void setObjectHistoryLocalService(
		edu.ucsd.nlp.service.ObjectHistoryLocalService objectHistoryLocalService) {
		this.objectHistoryLocalService = objectHistoryLocalService;
	}

	/**
	 * Returns the object history persistence.
	 *
	 * @return the object history persistence
	 */
	public ObjectHistoryPersistence getObjectHistoryPersistence() {
		return objectHistoryPersistence;
	}

	/**
	 * Sets the object history persistence.
	 *
	 * @param objectHistoryPersistence the object history persistence
	 */
	public void setObjectHistoryPersistence(
		ObjectHistoryPersistence objectHistoryPersistence) {
		this.objectHistoryPersistence = objectHistoryPersistence;
	}

	/**
	 * Returns the shared file local service.
	 *
	 * @return the shared file local service
	 */
	public edu.ucsd.nlp.service.SharedFileLocalService getSharedFileLocalService() {
		return sharedFileLocalService;
	}

	/**
	 * Sets the shared file local service.
	 *
	 * @param sharedFileLocalService the shared file local service
	 */
	public void setSharedFileLocalService(
		edu.ucsd.nlp.service.SharedFileLocalService sharedFileLocalService) {
		this.sharedFileLocalService = sharedFileLocalService;
	}

	/**
	 * Returns the shared file persistence.
	 *
	 * @return the shared file persistence
	 */
	public SharedFilePersistence getSharedFilePersistence() {
		return sharedFilePersistence;
	}

	/**
	 * Sets the shared file persistence.
	 *
	 * @param sharedFilePersistence the shared file persistence
	 */
	public void setSharedFilePersistence(
		SharedFilePersistence sharedFilePersistence) {
		this.sharedFilePersistence = sharedFilePersistence;
	}

	/**
	 * Returns the s k o s collaboration entry local service.
	 *
	 * @return the s k o s collaboration entry local service
	 */
	public edu.ucsd.nlp.service.SKOSCollaborationEntryLocalService getSKOSCollaborationEntryLocalService() {
		return skosCollaborationEntryLocalService;
	}

	/**
	 * Sets the s k o s collaboration entry local service.
	 *
	 * @param skosCollaborationEntryLocalService the s k o s collaboration entry local service
	 */
	public void setSKOSCollaborationEntryLocalService(
		edu.ucsd.nlp.service.SKOSCollaborationEntryLocalService skosCollaborationEntryLocalService) {
		this.skosCollaborationEntryLocalService = skosCollaborationEntryLocalService;
	}

	/**
	 * Returns the s k o s collaboration entry persistence.
	 *
	 * @return the s k o s collaboration entry persistence
	 */
	public SKOSCollaborationEntryPersistence getSKOSCollaborationEntryPersistence() {
		return skosCollaborationEntryPersistence;
	}

	/**
	 * Sets the s k o s collaboration entry persistence.
	 *
	 * @param skosCollaborationEntryPersistence the s k o s collaboration entry persistence
	 */
	public void setSKOSCollaborationEntryPersistence(
		SKOSCollaborationEntryPersistence skosCollaborationEntryPersistence) {
		this.skosCollaborationEntryPersistence = skosCollaborationEntryPersistence;
	}

	/**
	 * Returns the s k o s file local service.
	 *
	 * @return the s k o s file local service
	 */
	public edu.ucsd.nlp.service.SKOSFileLocalService getSKOSFileLocalService() {
		return skosFileLocalService;
	}

	/**
	 * Sets the s k o s file local service.
	 *
	 * @param skosFileLocalService the s k o s file local service
	 */
	public void setSKOSFileLocalService(
		edu.ucsd.nlp.service.SKOSFileLocalService skosFileLocalService) {
		this.skosFileLocalService = skosFileLocalService;
	}

	/**
	 * Returns the s k o s file persistence.
	 *
	 * @return the s k o s file persistence
	 */
	public SKOSFilePersistence getSKOSFilePersistence() {
		return skosFilePersistence;
	}

	/**
	 * Sets the s k o s file persistence.
	 *
	 * @param skosFilePersistence the s k o s file persistence
	 */
	public void setSKOSFilePersistence(SKOSFilePersistence skosFilePersistence) {
		this.skosFilePersistence = skosFilePersistence;
	}

	/**
	 * Returns the s k o s setting local service.
	 *
	 * @return the s k o s setting local service
	 */
	public edu.ucsd.nlp.service.SKOSSettingLocalService getSKOSSettingLocalService() {
		return skosSettingLocalService;
	}

	/**
	 * Sets the s k o s setting local service.
	 *
	 * @param skosSettingLocalService the s k o s setting local service
	 */
	public void setSKOSSettingLocalService(
		edu.ucsd.nlp.service.SKOSSettingLocalService skosSettingLocalService) {
		this.skosSettingLocalService = skosSettingLocalService;
	}

	/**
	 * Returns the s k o s setting persistence.
	 *
	 * @return the s k o s setting persistence
	 */
	public SKOSSettingPersistence getSKOSSettingPersistence() {
		return skosSettingPersistence;
	}

	/**
	 * Sets the s k o s setting persistence.
	 *
	 * @param skosSettingPersistence the s k o s setting persistence
	 */
	public void setSKOSSettingPersistence(
		SKOSSettingPersistence skosSettingPersistence) {
		this.skosSettingPersistence = skosSettingPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("edu.ucsd.nlp.model.SKOSFile",
			skosFileLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"edu.ucsd.nlp.model.SKOSFile");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return SKOSFile.class;
	}

	protected String getModelClassName() {
		return SKOSFile.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = skosFilePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = edu.ucsd.nlp.service.ObjectHistoryLocalService.class)
	protected edu.ucsd.nlp.service.ObjectHistoryLocalService objectHistoryLocalService;
	@BeanReference(type = ObjectHistoryPersistence.class)
	protected ObjectHistoryPersistence objectHistoryPersistence;
	@BeanReference(type = edu.ucsd.nlp.service.SharedFileLocalService.class)
	protected edu.ucsd.nlp.service.SharedFileLocalService sharedFileLocalService;
	@BeanReference(type = SharedFilePersistence.class)
	protected SharedFilePersistence sharedFilePersistence;
	@BeanReference(type = edu.ucsd.nlp.service.SKOSCollaborationEntryLocalService.class)
	protected edu.ucsd.nlp.service.SKOSCollaborationEntryLocalService skosCollaborationEntryLocalService;
	@BeanReference(type = SKOSCollaborationEntryPersistence.class)
	protected SKOSCollaborationEntryPersistence skosCollaborationEntryPersistence;
	@BeanReference(type = edu.ucsd.nlp.service.SKOSFileLocalService.class)
	protected edu.ucsd.nlp.service.SKOSFileLocalService skosFileLocalService;
	@BeanReference(type = SKOSFilePersistence.class)
	protected SKOSFilePersistence skosFilePersistence;
	@BeanReference(type = edu.ucsd.nlp.service.SKOSSettingLocalService.class)
	protected edu.ucsd.nlp.service.SKOSSettingLocalService skosSettingLocalService;
	@BeanReference(type = SKOSSettingPersistence.class)
	protected SKOSSettingPersistence skosSettingPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SKOSFileLocalServiceClpInvoker _clpInvoker = new SKOSFileLocalServiceClpInvoker();
}