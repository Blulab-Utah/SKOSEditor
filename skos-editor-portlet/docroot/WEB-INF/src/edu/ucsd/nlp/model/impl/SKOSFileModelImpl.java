/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucsd.nlp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.ucsd.nlp.model.SKOSFile;
import edu.ucsd.nlp.model.SKOSFileModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SKOSFile service. Represents a row in the &quot;SKOS_File&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.ucsd.nlp.model.SKOSFileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SKOSFileImpl}.
 * </p>
 *
 * @author http://nlp-app.ucsd.edu
 * @see SKOSFileImpl
 * @see edu.ucsd.nlp.model.SKOSFile
 * @see edu.ucsd.nlp.model.SKOSFileModel
 * @generated
 */
public class SKOSFileModelImpl extends BaseModelImpl<SKOSFile>
	implements SKOSFileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s k o s file model instance should use the {@link edu.ucsd.nlp.model.SKOSFile} interface instead.
	 */
	public static final String TABLE_NAME = "SKOS_File";
	public static final Object[][] TABLE_COLUMNS = {
			{ "skosFileId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "parentId", Types.BIGINT },
			{ "lastModifiedBy", Types.BIGINT },
			{ "created", Types.TIMESTAMP },
			{ "modified", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "contents", Types.VARCHAR },
			{ "version", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table SKOS_File (skosFileId LONG not null primary key,userId LONG,parentId LONG,lastModifiedBy LONG,created DATE null,modified DATE null,name VARCHAR(75) null,contents STRING null,version DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table SKOS_File";
	public static final String ORDER_BY_JPQL = " ORDER BY skosFile.skosFileId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SKOS_File.skosFileId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.ucsd.nlp.model.SKOSFile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.ucsd.nlp.model.SKOSFile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edu.ucsd.nlp.model.SKOSFile"),
			true);
	public static long PARENTID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long SKOSFILEID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.ucsd.nlp.model.SKOSFile"));

	public SKOSFileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _skosFileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSkosFileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _skosFileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SKOSFile.class;
	}

	@Override
	public String getModelClassName() {
		return SKOSFile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("skosFileId", getSkosFileId());
		attributes.put("userId", getUserId());
		attributes.put("parentId", getParentId());
		attributes.put("lastModifiedBy", getLastModifiedBy());
		attributes.put("created", getCreated());
		attributes.put("modified", getModified());
		attributes.put("name", getName());
		attributes.put("contents", getContents());
		attributes.put("version", getVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long skosFileId = (Long)attributes.get("skosFileId");

		if (skosFileId != null) {
			setSkosFileId(skosFileId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		Long lastModifiedBy = (Long)attributes.get("lastModifiedBy");

		if (lastModifiedBy != null) {
			setLastModifiedBy(lastModifiedBy);
		}

		Date created = (Date)attributes.get("created");

		if (created != null) {
			setCreated(created);
		}

		Date modified = (Date)attributes.get("modified");

		if (modified != null) {
			setModified(modified);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String contents = (String)attributes.get("contents");

		if (contents != null) {
			setContents(contents);
		}

		Double version = (Double)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}
	}

	@Override
	public long getSkosFileId() {
		return _skosFileId;
	}

	@Override
	public void setSkosFileId(long skosFileId) {
		_skosFileId = skosFileId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_columnBitmask |= PARENTID_COLUMN_BITMASK;

		if (!_setOriginalParentId) {
			_setOriginalParentId = true;

			_originalParentId = _parentId;
		}

		_parentId = parentId;
	}

	public long getOriginalParentId() {
		return _originalParentId;
	}

	@Override
	public long getLastModifiedBy() {
		return _lastModifiedBy;
	}

	@Override
	public void setLastModifiedBy(long lastModifiedBy) {
		_lastModifiedBy = lastModifiedBy;
	}

	@Override
	public Date getCreated() {
		return _created;
	}

	@Override
	public void setCreated(Date created) {
		_created = created;
	}

	@Override
	public Date getModified() {
		return _modified;
	}

	@Override
	public void setModified(Date modified) {
		_modified = modified;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getContents() {
		if (_contents == null) {
			return StringPool.BLANK;
		}
		else {
			return _contents;
		}
	}

	@Override
	public void setContents(String contents) {
		_contents = contents;
	}

	@Override
	public double getVersion() {
		return _version;
	}

	@Override
	public void setVersion(double version) {
		_version = version;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SKOSFile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SKOSFile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SKOSFile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SKOSFileImpl skosFileImpl = new SKOSFileImpl();

		skosFileImpl.setSkosFileId(getSkosFileId());
		skosFileImpl.setUserId(getUserId());
		skosFileImpl.setParentId(getParentId());
		skosFileImpl.setLastModifiedBy(getLastModifiedBy());
		skosFileImpl.setCreated(getCreated());
		skosFileImpl.setModified(getModified());
		skosFileImpl.setName(getName());
		skosFileImpl.setContents(getContents());
		skosFileImpl.setVersion(getVersion());

		skosFileImpl.resetOriginalValues();

		return skosFileImpl;
	}

	@Override
	public int compareTo(SKOSFile skosFile) {
		long primaryKey = skosFile.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SKOSFile)) {
			return false;
		}

		SKOSFile skosFile = (SKOSFile)obj;

		long primaryKey = skosFile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SKOSFileModelImpl skosFileModelImpl = this;

		skosFileModelImpl._originalUserId = skosFileModelImpl._userId;

		skosFileModelImpl._setOriginalUserId = false;

		skosFileModelImpl._originalParentId = skosFileModelImpl._parentId;

		skosFileModelImpl._setOriginalParentId = false;

		skosFileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SKOSFile> toCacheModel() {
		SKOSFileCacheModel skosFileCacheModel = new SKOSFileCacheModel();

		skosFileCacheModel.skosFileId = getSkosFileId();

		skosFileCacheModel.userId = getUserId();

		skosFileCacheModel.parentId = getParentId();

		skosFileCacheModel.lastModifiedBy = getLastModifiedBy();

		Date created = getCreated();

		if (created != null) {
			skosFileCacheModel.created = created.getTime();
		}
		else {
			skosFileCacheModel.created = Long.MIN_VALUE;
		}

		Date modified = getModified();

		if (modified != null) {
			skosFileCacheModel.modified = modified.getTime();
		}
		else {
			skosFileCacheModel.modified = Long.MIN_VALUE;
		}

		skosFileCacheModel.name = getName();

		String name = skosFileCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			skosFileCacheModel.name = null;
		}

		skosFileCacheModel.contents = getContents();

		String contents = skosFileCacheModel.contents;

		if ((contents != null) && (contents.length() == 0)) {
			skosFileCacheModel.contents = null;
		}

		skosFileCacheModel.version = getVersion();

		return skosFileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{skosFileId=");
		sb.append(getSkosFileId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", lastModifiedBy=");
		sb.append(getLastModifiedBy());
		sb.append(", created=");
		sb.append(getCreated());
		sb.append(", modified=");
		sb.append(getModified());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", contents=");
		sb.append(getContents());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("edu.ucsd.nlp.model.SKOSFile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>skosFileId</column-name><column-value><![CDATA[");
		sb.append(getSkosFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastModifiedBy</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>created</column-name><column-value><![CDATA[");
		sb.append(getCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modified</column-name><column-value><![CDATA[");
		sb.append(getModified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contents</column-name><column-value><![CDATA[");
		sb.append(getContents());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SKOSFile.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SKOSFile.class
		};
	private long _skosFileId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _parentId;
	private long _originalParentId;
	private boolean _setOriginalParentId;
	private long _lastModifiedBy;
	private Date _created;
	private Date _modified;
	private String _name;
	private String _contents;
	private double _version;
	private long _columnBitmask;
	private SKOSFile _escapedModel;
}