/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucsd.nlp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.ucsd.nlp.model.SKOSSetting;
import edu.ucsd.nlp.model.SKOSSettingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SKOSSetting service. Represents a row in the &quot;SKOS_Setting&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.ucsd.nlp.model.SKOSSettingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SKOSSettingImpl}.
 * </p>
 *
 * @author http://nlp-app.ucsd.edu
 * @see SKOSSettingImpl
 * @see edu.ucsd.nlp.model.SKOSSetting
 * @see edu.ucsd.nlp.model.SKOSSettingModel
 * @generated
 */
public class SKOSSettingModelImpl extends BaseModelImpl<SKOSSetting>
	implements SKOSSettingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s k o s setting model instance should use the {@link edu.ucsd.nlp.model.SKOSSetting} interface instead.
	 */
	public static final String TABLE_NAME = "SKOS_Setting";
	public static final Object[][] TABLE_COLUMNS = {
			{ "skosSettingId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "value", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SKOS_Setting (skosSettingId LONG not null primary key,userId LONG,name VARCHAR(75) null,value VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SKOS_Setting";
	public static final String ORDER_BY_JPQL = " ORDER BY skosSetting.skosSettingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SKOS_Setting.skosSettingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.ucsd.nlp.model.SKOSSetting"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.ucsd.nlp.model.SKOSSetting"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edu.ucsd.nlp.model.SKOSSetting"),
			true);
	public static long NAME_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long SKOSSETTINGID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.ucsd.nlp.model.SKOSSetting"));

	public SKOSSettingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _skosSettingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSkosSettingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _skosSettingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SKOSSetting.class;
	}

	@Override
	public String getModelClassName() {
		return SKOSSetting.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("skosSettingId", getSkosSettingId());
		attributes.put("userId", getUserId());
		attributes.put("name", getName());
		attributes.put("value", getValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long skosSettingId = (Long)attributes.get("skosSettingId");

		if (skosSettingId != null) {
			setSkosSettingId(skosSettingId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}
	}

	@Override
	public long getSkosSettingId() {
		return _skosSettingId;
	}

	@Override
	public void setSkosSettingId(long skosSettingId) {
		_skosSettingId = skosSettingId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SKOSSetting.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SKOSSetting toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SKOSSetting)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SKOSSettingImpl skosSettingImpl = new SKOSSettingImpl();

		skosSettingImpl.setSkosSettingId(getSkosSettingId());
		skosSettingImpl.setUserId(getUserId());
		skosSettingImpl.setName(getName());
		skosSettingImpl.setValue(getValue());

		skosSettingImpl.resetOriginalValues();

		return skosSettingImpl;
	}

	@Override
	public int compareTo(SKOSSetting skosSetting) {
		long primaryKey = skosSetting.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SKOSSetting)) {
			return false;
		}

		SKOSSetting skosSetting = (SKOSSetting)obj;

		long primaryKey = skosSetting.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SKOSSettingModelImpl skosSettingModelImpl = this;

		skosSettingModelImpl._originalUserId = skosSettingModelImpl._userId;

		skosSettingModelImpl._setOriginalUserId = false;

		skosSettingModelImpl._originalName = skosSettingModelImpl._name;

		skosSettingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SKOSSetting> toCacheModel() {
		SKOSSettingCacheModel skosSettingCacheModel = new SKOSSettingCacheModel();

		skosSettingCacheModel.skosSettingId = getSkosSettingId();

		skosSettingCacheModel.userId = getUserId();

		skosSettingCacheModel.name = getName();

		String name = skosSettingCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			skosSettingCacheModel.name = null;
		}

		skosSettingCacheModel.value = getValue();

		String value = skosSettingCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			skosSettingCacheModel.value = null;
		}

		return skosSettingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{skosSettingId=");
		sb.append(getSkosSettingId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", value=");
		sb.append(getValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("edu.ucsd.nlp.model.SKOSSetting");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>skosSettingId</column-name><column-value><![CDATA[");
		sb.append(getSkosSettingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SKOSSetting.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SKOSSetting.class
		};
	private long _skosSettingId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _name;
	private String _originalName;
	private String _value;
	private long _columnBitmask;
	private SKOSSetting _escapedModel;
}