/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucsd.nlp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.ucsd.nlp.model.ObjectHistory;
import edu.ucsd.nlp.model.ObjectHistoryModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ObjectHistory service. Represents a row in the &quot;SKOS_ObjectHistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.ucsd.nlp.model.ObjectHistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ObjectHistoryImpl}.
 * </p>
 *
 * @author http://nlp-app.ucsd.edu
 * @see ObjectHistoryImpl
 * @see edu.ucsd.nlp.model.ObjectHistory
 * @see edu.ucsd.nlp.model.ObjectHistoryModel
 * @generated
 */
public class ObjectHistoryModelImpl extends BaseModelImpl<ObjectHistory>
	implements ObjectHistoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a object history model instance should use the {@link edu.ucsd.nlp.model.ObjectHistory} interface instead.
	 */
	public static final String TABLE_NAME = "SKOS_ObjectHistory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "skosFileId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "recorded", Types.TIMESTAMP },
			{ "type_", Types.VARCHAR },
			{ "schemeURI", Types.VARCHAR },
			{ "conceptURI", Types.VARCHAR },
			{ "value", Types.VARCHAR },
			{ "objectType", Types.VARCHAR },
			{ "objectType2", Types.VARCHAR },
			{ "lang", Types.VARCHAR },
			{ "details", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SKOS_ObjectHistory (id_ LONG not null primary key,skosFileId LONG,userId LONG,recorded DATE null,type_ VARCHAR(75) null,schemeURI STRING null,conceptURI STRING null,value VARCHAR(75) null,objectType VARCHAR(75) null,objectType2 VARCHAR(75) null,lang VARCHAR(75) null,details STRING null)";
	public static final String TABLE_SQL_DROP = "drop table SKOS_ObjectHistory";
	public static final String ORDER_BY_JPQL = " ORDER BY objectHistory.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SKOS_ObjectHistory.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.ucsd.nlp.model.ObjectHistory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.ucsd.nlp.model.ObjectHistory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edu.ucsd.nlp.model.ObjectHistory"),
			true);
	public static long CONCEPTURI_COLUMN_BITMASK = 1L;
	public static long SKOSFILEID_COLUMN_BITMASK = 2L;
	public static long TYPE_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static long ID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.ucsd.nlp.model.ObjectHistory"));

	public ObjectHistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ObjectHistory.class;
	}

	@Override
	public String getModelClassName() {
		return ObjectHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("skosFileId", getSkosFileId());
		attributes.put("userId", getUserId());
		attributes.put("recorded", getRecorded());
		attributes.put("type", getType());
		attributes.put("schemeURI", getSchemeURI());
		attributes.put("conceptURI", getConceptURI());
		attributes.put("value", getValue());
		attributes.put("objectType", getObjectType());
		attributes.put("objectType2", getObjectType2());
		attributes.put("lang", getLang());
		attributes.put("details", getDetails());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long skosFileId = (Long)attributes.get("skosFileId");

		if (skosFileId != null) {
			setSkosFileId(skosFileId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date recorded = (Date)attributes.get("recorded");

		if (recorded != null) {
			setRecorded(recorded);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String schemeURI = (String)attributes.get("schemeURI");

		if (schemeURI != null) {
			setSchemeURI(schemeURI);
		}

		String conceptURI = (String)attributes.get("conceptURI");

		if (conceptURI != null) {
			setConceptURI(conceptURI);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		String objectType = (String)attributes.get("objectType");

		if (objectType != null) {
			setObjectType(objectType);
		}

		String objectType2 = (String)attributes.get("objectType2");

		if (objectType2 != null) {
			setObjectType2(objectType2);
		}

		String lang = (String)attributes.get("lang");

		if (lang != null) {
			setLang(lang);
		}

		String details = (String)attributes.get("details");

		if (details != null) {
			setDetails(details);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getSkosFileId() {
		return _skosFileId;
	}

	@Override
	public void setSkosFileId(long skosFileId) {
		_columnBitmask |= SKOSFILEID_COLUMN_BITMASK;

		if (!_setOriginalSkosFileId) {
			_setOriginalSkosFileId = true;

			_originalSkosFileId = _skosFileId;
		}

		_skosFileId = skosFileId;
	}

	public long getOriginalSkosFileId() {
		return _originalSkosFileId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Date getRecorded() {
		return _recorded;
	}

	@Override
	public void setRecorded(Date recorded) {
		_recorded = recorded;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@Override
	public String getSchemeURI() {
		if (_schemeURI == null) {
			return StringPool.BLANK;
		}
		else {
			return _schemeURI;
		}
	}

	@Override
	public void setSchemeURI(String schemeURI) {
		_schemeURI = schemeURI;
	}

	@Override
	public String getConceptURI() {
		if (_conceptURI == null) {
			return StringPool.BLANK;
		}
		else {
			return _conceptURI;
		}
	}

	@Override
	public void setConceptURI(String conceptURI) {
		_columnBitmask |= CONCEPTURI_COLUMN_BITMASK;

		if (_originalConceptURI == null) {
			_originalConceptURI = _conceptURI;
		}

		_conceptURI = conceptURI;
	}

	public String getOriginalConceptURI() {
		return GetterUtil.getString(_originalConceptURI);
	}

	@Override
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	@Override
	public String getObjectType() {
		if (_objectType == null) {
			return StringPool.BLANK;
		}
		else {
			return _objectType;
		}
	}

	@Override
	public void setObjectType(String objectType) {
		_objectType = objectType;
	}

	@Override
	public String getObjectType2() {
		if (_objectType2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _objectType2;
		}
	}

	@Override
	public void setObjectType2(String objectType2) {
		_objectType2 = objectType2;
	}

	@Override
	public String getLang() {
		if (_lang == null) {
			return StringPool.BLANK;
		}
		else {
			return _lang;
		}
	}

	@Override
	public void setLang(String lang) {
		_lang = lang;
	}

	@Override
	public String getDetails() {
		if (_details == null) {
			return StringPool.BLANK;
		}
		else {
			return _details;
		}
	}

	@Override
	public void setDetails(String details) {
		_details = details;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ObjectHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ObjectHistory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ObjectHistory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ObjectHistoryImpl objectHistoryImpl = new ObjectHistoryImpl();

		objectHistoryImpl.setId(getId());
		objectHistoryImpl.setSkosFileId(getSkosFileId());
		objectHistoryImpl.setUserId(getUserId());
		objectHistoryImpl.setRecorded(getRecorded());
		objectHistoryImpl.setType(getType());
		objectHistoryImpl.setSchemeURI(getSchemeURI());
		objectHistoryImpl.setConceptURI(getConceptURI());
		objectHistoryImpl.setValue(getValue());
		objectHistoryImpl.setObjectType(getObjectType());
		objectHistoryImpl.setObjectType2(getObjectType2());
		objectHistoryImpl.setLang(getLang());
		objectHistoryImpl.setDetails(getDetails());

		objectHistoryImpl.resetOriginalValues();

		return objectHistoryImpl;
	}

	@Override
	public int compareTo(ObjectHistory objectHistory) {
		long primaryKey = objectHistory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ObjectHistory)) {
			return false;
		}

		ObjectHistory objectHistory = (ObjectHistory)obj;

		long primaryKey = objectHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ObjectHistoryModelImpl objectHistoryModelImpl = this;

		objectHistoryModelImpl._originalSkosFileId = objectHistoryModelImpl._skosFileId;

		objectHistoryModelImpl._setOriginalSkosFileId = false;

		objectHistoryModelImpl._originalUserId = objectHistoryModelImpl._userId;

		objectHistoryModelImpl._setOriginalUserId = false;

		objectHistoryModelImpl._originalType = objectHistoryModelImpl._type;

		objectHistoryModelImpl._originalConceptURI = objectHistoryModelImpl._conceptURI;

		objectHistoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ObjectHistory> toCacheModel() {
		ObjectHistoryCacheModel objectHistoryCacheModel = new ObjectHistoryCacheModel();

		objectHistoryCacheModel.id = getId();

		objectHistoryCacheModel.skosFileId = getSkosFileId();

		objectHistoryCacheModel.userId = getUserId();

		Date recorded = getRecorded();

		if (recorded != null) {
			objectHistoryCacheModel.recorded = recorded.getTime();
		}
		else {
			objectHistoryCacheModel.recorded = Long.MIN_VALUE;
		}

		objectHistoryCacheModel.type = getType();

		String type = objectHistoryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			objectHistoryCacheModel.type = null;
		}

		objectHistoryCacheModel.schemeURI = getSchemeURI();

		String schemeURI = objectHistoryCacheModel.schemeURI;

		if ((schemeURI != null) && (schemeURI.length() == 0)) {
			objectHistoryCacheModel.schemeURI = null;
		}

		objectHistoryCacheModel.conceptURI = getConceptURI();

		String conceptURI = objectHistoryCacheModel.conceptURI;

		if ((conceptURI != null) && (conceptURI.length() == 0)) {
			objectHistoryCacheModel.conceptURI = null;
		}

		objectHistoryCacheModel.value = getValue();

		String value = objectHistoryCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			objectHistoryCacheModel.value = null;
		}

		objectHistoryCacheModel.objectType = getObjectType();

		String objectType = objectHistoryCacheModel.objectType;

		if ((objectType != null) && (objectType.length() == 0)) {
			objectHistoryCacheModel.objectType = null;
		}

		objectHistoryCacheModel.objectType2 = getObjectType2();

		String objectType2 = objectHistoryCacheModel.objectType2;

		if ((objectType2 != null) && (objectType2.length() == 0)) {
			objectHistoryCacheModel.objectType2 = null;
		}

		objectHistoryCacheModel.lang = getLang();

		String lang = objectHistoryCacheModel.lang;

		if ((lang != null) && (lang.length() == 0)) {
			objectHistoryCacheModel.lang = null;
		}

		objectHistoryCacheModel.details = getDetails();

		String details = objectHistoryCacheModel.details;

		if ((details != null) && (details.length() == 0)) {
			objectHistoryCacheModel.details = null;
		}

		return objectHistoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", skosFileId=");
		sb.append(getSkosFileId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", recorded=");
		sb.append(getRecorded());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", schemeURI=");
		sb.append(getSchemeURI());
		sb.append(", conceptURI=");
		sb.append(getConceptURI());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", objectType=");
		sb.append(getObjectType());
		sb.append(", objectType2=");
		sb.append(getObjectType2());
		sb.append(", lang=");
		sb.append(getLang());
		sb.append(", details=");
		sb.append(getDetails());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("edu.ucsd.nlp.model.ObjectHistory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>skosFileId</column-name><column-value><![CDATA[");
		sb.append(getSkosFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recorded</column-name><column-value><![CDATA[");
		sb.append(getRecorded());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schemeURI</column-name><column-value><![CDATA[");
		sb.append(getSchemeURI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conceptURI</column-name><column-value><![CDATA[");
		sb.append(getConceptURI());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objectType</column-name><column-value><![CDATA[");
		sb.append(getObjectType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objectType2</column-name><column-value><![CDATA[");
		sb.append(getObjectType2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lang</column-name><column-value><![CDATA[");
		sb.append(getLang());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>details</column-name><column-value><![CDATA[");
		sb.append(getDetails());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ObjectHistory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ObjectHistory.class
		};
	private long _id;
	private long _skosFileId;
	private long _originalSkosFileId;
	private boolean _setOriginalSkosFileId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _recorded;
	private String _type;
	private String _originalType;
	private String _schemeURI;
	private String _conceptURI;
	private String _originalConceptURI;
	private String _value;
	private String _objectType;
	private String _objectType2;
	private String _lang;
	private String _details;
	private long _columnBitmask;
	private ObjectHistory _escapedModel;
}