/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package edu.ucsd.nlp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import edu.ucsd.nlp.model.SharedFile;
import edu.ucsd.nlp.model.SharedFileModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SharedFile service. Represents a row in the &quot;SKOS_SharedFile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link edu.ucsd.nlp.model.SharedFileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SharedFileImpl}.
 * </p>
 *
 * @author http://nlp-app.ucsd.edu
 * @see SharedFileImpl
 * @see edu.ucsd.nlp.model.SharedFile
 * @see edu.ucsd.nlp.model.SharedFileModel
 * @generated
 */
public class SharedFileModelImpl extends BaseModelImpl<SharedFile>
	implements SharedFileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a shared file model instance should use the {@link edu.ucsd.nlp.model.SharedFile} interface instead.
	 */
	public static final String TABLE_NAME = "SKOS_SharedFile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "skosFileId", Types.BIGINT },
			{ "sharedBy", Types.BIGINT },
			{ "sharedWith", Types.BIGINT },
			{ "sharedOn", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "access_", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table SKOS_SharedFile (id_ LONG not null primary key,skosFileId LONG,sharedBy LONG,sharedWith LONG,sharedOn DATE null,status INTEGER,access_ INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table SKOS_SharedFile";
	public static final String ORDER_BY_JPQL = " ORDER BY sharedFile.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SKOS_SharedFile.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.edu.ucsd.nlp.model.SharedFile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.edu.ucsd.nlp.model.SharedFile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.edu.ucsd.nlp.model.SharedFile"),
			true);
	public static long SHAREDBY_COLUMN_BITMASK = 1L;
	public static long SHAREDWITH_COLUMN_BITMASK = 2L;
	public static long SKOSFILEID_COLUMN_BITMASK = 4L;
	public static long ID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.edu.ucsd.nlp.model.SharedFile"));

	public SharedFileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SharedFile.class;
	}

	@Override
	public String getModelClassName() {
		return SharedFile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("skosFileId", getSkosFileId());
		attributes.put("sharedBy", getSharedBy());
		attributes.put("sharedWith", getSharedWith());
		attributes.put("sharedOn", getSharedOn());
		attributes.put("status", getStatus());
		attributes.put("access", getAccess());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long skosFileId = (Long)attributes.get("skosFileId");

		if (skosFileId != null) {
			setSkosFileId(skosFileId);
		}

		Long sharedBy = (Long)attributes.get("sharedBy");

		if (sharedBy != null) {
			setSharedBy(sharedBy);
		}

		Long sharedWith = (Long)attributes.get("sharedWith");

		if (sharedWith != null) {
			setSharedWith(sharedWith);
		}

		Date sharedOn = (Date)attributes.get("sharedOn");

		if (sharedOn != null) {
			setSharedOn(sharedOn);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer access = (Integer)attributes.get("access");

		if (access != null) {
			setAccess(access);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getSkosFileId() {
		return _skosFileId;
	}

	@Override
	public void setSkosFileId(long skosFileId) {
		_columnBitmask |= SKOSFILEID_COLUMN_BITMASK;

		if (!_setOriginalSkosFileId) {
			_setOriginalSkosFileId = true;

			_originalSkosFileId = _skosFileId;
		}

		_skosFileId = skosFileId;
	}

	public long getOriginalSkosFileId() {
		return _originalSkosFileId;
	}

	@Override
	public long getSharedBy() {
		return _sharedBy;
	}

	@Override
	public void setSharedBy(long sharedBy) {
		_columnBitmask |= SHAREDBY_COLUMN_BITMASK;

		if (!_setOriginalSharedBy) {
			_setOriginalSharedBy = true;

			_originalSharedBy = _sharedBy;
		}

		_sharedBy = sharedBy;
	}

	public long getOriginalSharedBy() {
		return _originalSharedBy;
	}

	@Override
	public long getSharedWith() {
		return _sharedWith;
	}

	@Override
	public void setSharedWith(long sharedWith) {
		_columnBitmask |= SHAREDWITH_COLUMN_BITMASK;

		if (!_setOriginalSharedWith) {
			_setOriginalSharedWith = true;

			_originalSharedWith = _sharedWith;
		}

		_sharedWith = sharedWith;
	}

	public long getOriginalSharedWith() {
		return _originalSharedWith;
	}

	@Override
	public Date getSharedOn() {
		return _sharedOn;
	}

	@Override
	public void setSharedOn(Date sharedOn) {
		_sharedOn = sharedOn;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public int getAccess() {
		return _access;
	}

	@Override
	public void setAccess(int access) {
		_access = access;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SharedFile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SharedFile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SharedFile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SharedFileImpl sharedFileImpl = new SharedFileImpl();

		sharedFileImpl.setId(getId());
		sharedFileImpl.setSkosFileId(getSkosFileId());
		sharedFileImpl.setSharedBy(getSharedBy());
		sharedFileImpl.setSharedWith(getSharedWith());
		sharedFileImpl.setSharedOn(getSharedOn());
		sharedFileImpl.setStatus(getStatus());
		sharedFileImpl.setAccess(getAccess());

		sharedFileImpl.resetOriginalValues();

		return sharedFileImpl;
	}

	@Override
	public int compareTo(SharedFile sharedFile) {
		long primaryKey = sharedFile.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SharedFile)) {
			return false;
		}

		SharedFile sharedFile = (SharedFile)obj;

		long primaryKey = sharedFile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SharedFileModelImpl sharedFileModelImpl = this;

		sharedFileModelImpl._originalSkosFileId = sharedFileModelImpl._skosFileId;

		sharedFileModelImpl._setOriginalSkosFileId = false;

		sharedFileModelImpl._originalSharedBy = sharedFileModelImpl._sharedBy;

		sharedFileModelImpl._setOriginalSharedBy = false;

		sharedFileModelImpl._originalSharedWith = sharedFileModelImpl._sharedWith;

		sharedFileModelImpl._setOriginalSharedWith = false;

		sharedFileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SharedFile> toCacheModel() {
		SharedFileCacheModel sharedFileCacheModel = new SharedFileCacheModel();

		sharedFileCacheModel.id = getId();

		sharedFileCacheModel.skosFileId = getSkosFileId();

		sharedFileCacheModel.sharedBy = getSharedBy();

		sharedFileCacheModel.sharedWith = getSharedWith();

		Date sharedOn = getSharedOn();

		if (sharedOn != null) {
			sharedFileCacheModel.sharedOn = sharedOn.getTime();
		}
		else {
			sharedFileCacheModel.sharedOn = Long.MIN_VALUE;
		}

		sharedFileCacheModel.status = getStatus();

		sharedFileCacheModel.access = getAccess();

		return sharedFileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", skosFileId=");
		sb.append(getSkosFileId());
		sb.append(", sharedBy=");
		sb.append(getSharedBy());
		sb.append(", sharedWith=");
		sb.append(getSharedWith());
		sb.append(", sharedOn=");
		sb.append(getSharedOn());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", access=");
		sb.append(getAccess());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("edu.ucsd.nlp.model.SharedFile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>skosFileId</column-name><column-value><![CDATA[");
		sb.append(getSkosFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharedBy</column-name><column-value><![CDATA[");
		sb.append(getSharedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharedWith</column-name><column-value><![CDATA[");
		sb.append(getSharedWith());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharedOn</column-name><column-value><![CDATA[");
		sb.append(getSharedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>access</column-name><column-value><![CDATA[");
		sb.append(getAccess());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SharedFile.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SharedFile.class
		};
	private long _id;
	private long _skosFileId;
	private long _originalSkosFileId;
	private boolean _setOriginalSkosFileId;
	private long _sharedBy;
	private long _originalSharedBy;
	private boolean _setOriginalSharedBy;
	private long _sharedWith;
	private long _originalSharedWith;
	private boolean _setOriginalSharedWith;
	private Date _sharedOn;
	private int _status;
	private int _access;
	private long _columnBitmask;
	private SharedFile _escapedModel;
}